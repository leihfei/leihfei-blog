export const data = JSON.parse("{\"key\":\"v-0cf05c3b\",\"path\":\"/thread/0.%E7%BA%BF%E7%A8%8B%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80.html\",\"title\":\"Java线程八大核心思想\",\"lang\":\"en-US\",\"frontmatter\":{},\"excerpt\":\"\",\"headers\":[{\"level\":2,\"title\":\"目录：\",\"slug\":\"目录\",\"link\":\"#目录\",\"children\":[]},{\"level\":2,\"title\":\"1. 有多少种实现线程的方法？典型错误答案和正确答案（对应视频3-1~3-3、3-6）   ？\",\"slug\":\"_1-有多少种实现线程的方法-典型错误答案和正确答案-对应视频3-1-3-3、3-6\",\"link\":\"#_1-有多少种实现线程的方法-典型错误答案和正确答案-对应视频3-1-3-3、3-6\",\"children\":[]},{\"level\":2,\"title\":\"2. 实现Runnable接口和继承Thread类哪种方式更好？（对应视频3-2）\",\"slug\":\"_2-实现runnable接口和继承thread类哪种方式更好-对应视频3-2\",\"link\":\"#_2-实现runnable接口和继承thread类哪种方式更好-对应视频3-2\",\"children\":[]},{\"level\":2,\"title\":\"3. 一个线程两次调用start*()*方法会出现什么情况？为什么？（对应视频4-2、4-5）\",\"slug\":\"_3-一个线程两次调用start-方法会出现什么情况-为什么-对应视频4-2、4-5\",\"link\":\"#_3-一个线程两次调用start-方法会出现什么情况-为什么-对应视频4-2、4-5\",\"children\":[]},{\"level\":2,\"title\":\"4 既然 start()方法会调用 run*()* 方法，为什么我们选择调用 start*()* 方法，而不是直接调用 run() 方法呢？（对应视频4-5）\",\"slug\":\"_4-既然-start-方法会调用-run-方法-为什么我们选择调用-start-方法-而不是直接调用-run-方法呢-对应视频4-5\",\"link\":\"#_4-既然-start-方法会调用-run-方法-为什么我们选择调用-start-方法-而不是直接调用-run-方法呢-对应视频4-5\",\"children\":[]},{\"level\":2,\"title\":\"5 如何正确停止一个线程？（对应视频5-6、5-7、5-15）\",\"slug\":\"_5-如何正确停止一个线程-对应视频5-6、5-7、5-15\",\"link\":\"#_5-如何正确停止一个线程-对应视频5-6、5-7、5-15\",\"children\":[]},{\"level\":2,\"title\":\"*6 如何处理不可中断的阻塞（例如抢锁时ReentrantLock.lock()*或者Socket I/O时无法响应中断，那 应该怎么让该线程停止呢？）（对应视频5-15） **\",\"slug\":\"_6-如何处理不可中断的阻塞-例如抢锁时reentrantlock-lock-或者socket-i-o时无法响应中断-那-应该怎么让该线程停止呢-对应视频5-15\",\"link\":\"#_6-如何处理不可中断的阻塞-例如抢锁时reentrantlock-lock-或者socket-i-o时无法响应中断-那-应该怎么让该线程停止呢-对应视频5-15\",\"children\":[]},{\"level\":2,\"title\":\"**7 线程有哪几种状态？生命周期是什么？（对应视频6-1、6-2、6-5）   **\",\"slug\":\"_7-线程有哪几种状态-生命周期是什么-对应视频6-1、6-2、6-5\",\"link\":\"#_7-线程有哪几种状态-生命周期是什么-对应视频6-1、6-2、6-5\",\"children\":[]},{\"level\":2,\"title\":\"8 如何用wait*()*实现两个线程交替打印 0~100 的奇偶数？（对应视频7-7）\",\"slug\":\"_8-如何用wait-实现两个线程交替打印-0-100-的奇偶数-对应视频7-7\",\"link\":\"#_8-如何用wait-实现两个线程交替打印-0-100-的奇偶数-对应视频7-7\",\"children\":[]},{\"level\":2,\"title\":\"9 如何用wait实现生产者模式？（对应视频7-6）\",\"slug\":\"_9-如何用wait实现生产者模式-对应视频7-6\",\"link\":\"#_9-如何用wait实现生产者模式-对应视频7-6\",\"children\":[]},{\"level\":2,\"title\":\"**10 为什么wait必须在同步代码块中使用？（对应视频7-8）   **\",\"slug\":\"_10-为什么wait必须在同步代码块中使用-对应视频7-8\",\"link\":\"#_10-为什么wait必须在同步代码块中使用-对应视频7-8\",\"children\":[]},{\"level\":2,\"title\":\"*11 为什么线程通信的方法wait(), notify()和notifyAll()*被定义在Object类里？而sleep定义在 Thread类里？（对应视频7-8）   **\",\"slug\":\"_11-为什么线程通信的方法wait-notify-和notifyall-被定义在object类里-而sleep定义在-thread类里-对应视频7-8\",\"link\":\"#_11-为什么线程通信的方法wait-notify-和notifyall-被定义在object类里-而sleep定义在-thread类里-对应视频7-8\",\"children\":[]},{\"level\":2,\"title\":\"12 wait方法是属于Object对象的，那调用Thread.wait会怎么样？（对应视频7-8）\",\"slug\":\"_12-wait方法是属于object对象的-那调用thread-wait会怎么样-对应视频7-8\",\"link\":\"#_12-wait方法是属于object对象的-那调用thread-wait会怎么样-对应视频7-8\",\"children\":[]},{\"level\":2,\"title\":\"13 如何选择用notify还是notifyAll？（对应视频7-3）\",\"slug\":\"_13-如何选择用notify还是notifyall-对应视频7-3\",\"link\":\"#_13-如何选择用notify还是notifyall-对应视频7-3\",\"children\":[]},{\"level\":2,\"title\":\"14 notifyAll之后所有的线程都会再次抢夺锁，如果某线程抢夺失败怎么办？（对应视频7-8）\",\"slug\":\"_14-notifyall之后所有的线程都会再次抢夺锁-如果某线程抢夺失败怎么办-对应视频7-8\",\"link\":\"#_14-notifyall之后所有的线程都会再次抢夺锁-如果某线程抢夺失败怎么办-对应视频7-8\",\"children\":[]},{\"level\":2,\"title\":\"*15 用suspend()和resume()*来阻塞线程可以吗？为什么？（对应视频7-8）   **\",\"slug\":\"_15-用suspend-和resume-来阻塞线程可以吗-为什么-对应视频7-8\",\"link\":\"#_15-用suspend-和resume-来阻塞线程可以吗-为什么-对应视频7-8\",\"children\":[]},{\"level\":2,\"title\":\"16 wait/notify、sleep的异同（方法属于哪个对象？线程状态怎么切换？）（对应视频7-11）\",\"slug\":\"_16-wait-notify、sleep的异同-方法属于哪个对象-线程状态怎么切换-对应视频7-11\",\"link\":\"#_16-wait-notify、sleep的异同-方法属于哪个对象-线程状态怎么切换-对应视频7-11\",\"children\":[]},{\"level\":2,\"title\":\"17 **在join期间，线程处于哪种线程状态？（对应视频7-13） **\",\"slug\":\"_17-在join期间-线程处于哪种线程状态-对应视频7-13\",\"link\":\"#_17-在join期间-线程处于哪种线程状态-对应视频7-13\",\"children\":[]},{\"level\":2,\"title\":\"**18 yield和sleep区别？（对应视频7-15）   **\",\"slug\":\"_18-yield和sleep区别-对应视频7-15\",\"link\":\"#_18-yield和sleep区别-对应视频7-15\",\"children\":[]},{\"level\":2,\"title\":\"**19 守护线程和普通线程的区别？（对应视频8-3）   **\",\"slug\":\"_19-守护线程和普通线程的区别-对应视频8-3\",\"link\":\"#_19-守护线程和普通线程的区别-对应视频8-3\",\"children\":[]},{\"level\":2,\"title\":\"**20 我们是否需要给线程设置为守护线程？（对应视频8-3）   **\",\"slug\":\"_20-我们是否需要给线程设置为守护线程-对应视频8-3\",\"link\":\"#_20-我们是否需要给线程设置为守护线程-对应视频8-3\",\"children\":[]},{\"level\":2,\"title\":\"**21 为什么程序设计不应依赖于线程优先级？（对应视频8-4）   **\",\"slug\":\"_21-为什么程序设计不应依赖于线程优先级-对应视频8-4\",\"link\":\"#_21-为什么程序设计不应依赖于线程优先级-对应视频8-4\",\"children\":[]},{\"level\":2,\"title\":\"**22 讲讲Java异常体系？（对应视频5-9）   **\",\"slug\":\"_22-讲讲java异常体系-对应视频5-9\",\"link\":\"#_22-讲讲java异常体系-对应视频5-9\",\"children\":[]},{\"level\":2,\"title\":\"**23 实际工作中，如何全局处理异常？（对应视频9-3）   **\",\"slug\":\"_23-实际工作中-如何全局处理异常-对应视频9-3\",\"link\":\"#_23-实际工作中-如何全局处理异常-对应视频9-3\",\"children\":[]},{\"level\":2,\"title\":\"**24 为什么异常需要全局处理？不处理行不行？（对应视频9-3）   **\",\"slug\":\"_24-为什么异常需要全局处理-不处理行不行-对应视频9-3\",\"link\":\"#_24-为什么异常需要全局处理-不处理行不行-对应视频9-3\",\"children\":[]},{\"level\":2,\"title\":\"**25 run方法是否可以抛出异常？如果抛出异常，线程的状态会怎么样？（对应视频9-1）   **\",\"slug\":\"_25-run方法是否可以抛出异常-如果抛出异常-线程的状态会怎么样-对应视频9-1\",\"link\":\"#_25-run方法是否可以抛出异常-如果抛出异常-线程的状态会怎么样-对应视频9-1\",\"children\":[]},{\"level\":2,\"title\":\"**26 一共有哪几类线程安全问题？（对应视频10-3、10-6~10-12）   **\",\"slug\":\"_26-一共有哪几类线程安全问题-对应视频10-3、10-6-10-12\",\"link\":\"#_26-一共有哪几类线程安全问题-对应视频10-3、10-6-10-12\",\"children\":[]},{\"level\":2,\"title\":\"**27 哪些场景需要额外注意线程安全问题？（对应视频10-13）   **\",\"slug\":\"_27-哪些场景需要额外注意线程安全问题-对应视频10-13\",\"link\":\"#_27-哪些场景需要额外注意线程安全问题-对应视频10-13\",\"children\":[]},{\"level\":2,\"title\":\"**28 为什么多线程会带来性能问题？（对应视频10-14）   **\",\"slug\":\"_28-为什么多线程会带来性能问题-对应视频10-14\",\"link\":\"#_28-为什么多线程会带来性能问题-对应视频10-14\",\"children\":[]},{\"level\":2,\"title\":\"**29 什么是多线程的上下文切换？（对应视频10-14）   **\",\"slug\":\"_29-什么是多线程的上下文切换-对应视频10-14\",\"link\":\"#_29-什么是多线程的上下文切换-对应视频10-14\",\"children\":[]}],\"git\":{},\"filePathRelative\":\"thread/0.线程八大核心基础.md\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
